{"version":3,"file":"appearance.js","sourceRoot":"","sources":["appearance.ts"],"names":[],"mappings":"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","sourcesContent":["import {MetricRandom} from \"./metric\";\nimport {EventDispatcher} from \"./event-dispatcher\";\nimport type {\n  IAppearance,\n  IAppearanceEmitterScheme,\n  IAppearanceObject,\n  IAppearanceObjectDestroyed,\n  IAppearanceStyleSheet,\n  IAppearanceValues\n} from \"../types\";\nimport {ObjectToString, UnCamelize} from \"../utilities\";\n\n\n/**\n * CoreAppearanceProps\n * @description Analyse la propriété de l'apparence et la réecrit\n * @param name Nom de la propriété\n * @param value Valeur de la propriété\n * @example\n * CoreAppearanceProps<IAppearanceObject>( { color : '#777' } )\n */\nexport function CoreAppearanceProps<T extends IAppearanceObject | IAppearanceObjectDestroyed>(\n  name: keyof IAppearanceObject,\n  value: IAppearanceValues\n): T {\n\n  const keys: string[] = [];\n\n  const parsed: T = {} as T\n\n  /**\n   * Réecriture\n   */\n  switch (name) {\n\n    case 'paddingVertical':\n\n      keys.push('paddingTop')\n\n      keys.push('paddingBottom')\n\n      break;\n\n    case 'paddingHorizontal':\n\n      keys.push('paddingLeft')\n\n      keys.push('paddingRight')\n\n      break;\n\n\n    case 'marginVertical':\n\n      keys.push('marginTop')\n\n      keys.push('marginBottom')\n\n      break;\n\n    case 'marginHorizontal':\n\n      keys.push('marginLeft')\n\n      keys.push('marginRight')\n\n      break;\n\n    default:\n\n      keys.push(name as string)\n\n      break;\n\n  }\n\n  /**\n   * Injection\n   */\n  keys.forEach(key => {\n\n    parsed[UnCamelize(key) as any] = CoreAppearanceValues(value)\n\n  })\n\n  return parsed;\n\n}\n\n/**\n * CoreAppearanceValues\n * @description Analyse la valeur d'une propriété de l'apparence\n * @param value Valeur de la propriété\n * @example\n * CoreAppearanceValues( ... )\n */\nexport function CoreAppearanceValues(value: IAppearanceValues) {\n\n  if (typeof value == 'number') {\n\n    return `${value}`\n\n  }\n\n  return value;\n\n}\n\n\n/**\n * AUN Appearance\n * @description Gestionnaire d'apparence des éléments AUN\n */\nexport class CoreAppearance implements IAppearance {\n\n  /**\n   * Instance du DOM\n   */\n  instance: HTMLStyleElement;\n\n  /**\n   * Signature de l'apparence\n   */\n  uid: string;\n\n  /**\n   * Instance de l'emetteur\n   */\n  emitter = new EventDispatcher<IAppearanceEmitterScheme>();\n\n  /**\n   * Propriétés de l'apparence\n   */\n  properties: IAppearanceObject = {} as IAppearanceObject\n\n\n  constructor() {\n\n    this.instance = document.createElement('style')\n\n    this.uid = `${MetricRandom.CreateAlpha(4).join('')}-${MetricRandom.Create(12).join('')}`\n\n  }\n\n  /**\n   * sheet\n   * C@description onstruire une feuille de style liée à l'apparence\n   * @param stylesheet Definit la feuille de style\n   * @example\n   * appearance.sheet( {\n   *    'selector' : {\n   *       'property' : 'value',\n   *        ...\n   *    }\n   * } )\n   */\n  sheet(stylesheet: IAppearanceStyleSheet): this {\n\n    const styleSheet: string[] = []\n\n    Object.entries(stylesheet).forEach(({0: name, 1: props}) => {\n\n      const properties: IAppearanceObject = {} as IAppearanceObject\n\n      const selector = (name.includes('&'))\n\n        ? name.replace(new RegExp('&', 'g'), `.${this.uid}`)\n\n        : `.${this.uid} ${name}`;\n\n\n      const data = this.insertProperties(properties, props)\n\n      styleSheet[styleSheet.length] = `${selector}{ ${ObjectToString(data, {joiner: '; '})} }`\n\n    });\n\n\n    this.instance.innerHTML = styleSheet.join(' ')\n\n    this.mountImmediat()\n\n    return this;\n\n  }\n\n\n  /**\n   * inject\n   * @description Inject du code CSS dans l'instance de l'apparence courante par substitution\n   * @param code\n   * @example\n   *  appearance.inject(\"body{ color: red; }\")\n   */\n  inject(code: string | string[]) {\n\n    this.instance.innerHTML = typeof code != 'string'\n\n      ? code.join(' ')\n\n      : code;\n\n    this.mountImmediat();\n\n    return this;\n\n  }\n\n\n  /**\n   * insertProperties\n   * @description Insert des propriétés d'apparence dans un objet support. Analyse les propriétés et les valeurs avant de les insérer\n   * @param properties Propriétés d'apparence support\n   * @param data Données des propriétés à insérer\n   * @example\n   * appearance.insertProperties( objectPropertiesSupport, objectDataToInsert )\n   */\n  insertProperties(properties: IAppearanceObject, data: IAppearanceObject) {\n\n    Object.entries(data).forEach(({0: name, 1: value}) => {\n\n      Object.entries(\n        CoreAppearanceProps<IAppearanceObject>(name as keyof IAppearanceObject, value)\n      ).forEach(({0: key, 1: data}) => properties[key as any] = data)\n\n    })\n\n    this.emitter.dispatch('insertProperties', properties)\n\n    return properties;\n\n  }\n\n  /**\n   * removeProperties\n   * @description Supprime des propriétés d'apparence dans un object support.\n   * @param properties Propriétés d'apparence support\n   * @param payload Données des propriétés à supprimer\n   * @example\n   * appearance.removeProperties( objectPropertiesSupport, objectDataToRemove )\n   */\n  removeProperties(properties: IAppearanceObject, payload: IAppearanceObjectDestroyed) {\n\n    Object.values(payload).forEach(name => {\n\n      Object.entries(\n        CoreAppearanceProps<IAppearanceObjectDestroyed>(name as keyof IAppearanceObject, undefined)\n      ).forEach(({0: key}) => properties[key as any] = undefined)\n\n    })\n\n    this.emitter.dispatch('removeProperties', properties)\n\n    return properties;\n\n  }\n\n  /**\n   * set\n   * @description Insert des propriétés d'apparence. Analyse les propriétés et les valeurs avant de les insérer\n   * @param properties Propriétés à insérer\n   * @example\n   * appearance.set( {\n   *    'property' : 'value',\n   *    ...\n   * } )\n   */\n  set(properties: IAppearanceObject): this {\n\n    this.insertProperties(this.properties, properties)\n\n    this.emitter.dispatch('set', properties)\n\n    return this.sync();\n\n  }\n\n  /**\n   * unset\n   * @description Supprime des propriétés d'apparence. Analyse les propriétés et les valeurs avant.\n   * @param properties Propriétés à supprimer\n   * @example\n   * appearance.unset( {\n   *    'property' : 'value',\n   *    ...\n   * } )\n   */\n  unset(properties: IAppearanceObjectDestroyed): this {\n\n    this.removeProperties(this.properties, properties)\n\n    this.emitter.dispatch('unset', properties)\n\n    return this.sync();\n\n  }\n\n  /**\n   * mount\n   * @description Monter l'apparence si ce n'est pas fait\n   * @example\n   * appearance.mount()\n   */\n  mount(): this {\n\n    const length = Object.values(this.properties).length;\n\n    if (!this.instance.isConnected && length) {\n\n      this.mountImmediat();\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * mountImmediat\n   * @description Monter l'apparence\n   * @example\n   * appearance.mountImmediat()\n   */\n  mountImmediat(): this {\n\n    let head = document.querySelector('head')\n\n    if (!head) {\n\n      head = document.createElement('head')\n\n      document.documentElement.append(head)\n\n    }\n\n    head.append(this.instance)\n\n    this.emitter.dispatch('mount', this)\n\n    return this;\n\n  }\n\n  /**\n   * destroy\n   * @description Détruit l'apparence\n   * @example\n   * appearance.destroy()\n   */\n  destroy(): this {\n\n    this.instance.remove()\n\n    this.emitter.dispatch('destroy', undefined)\n\n    return this;\n\n  }\n\n  /**\n   * sync\n   * @description Synchronise l'apparence\n   * @example\n   * appearance.sync()\n   */\n  sync(): this {\n\n    const rendering: string[] = []\n\n    Object.entries(this.properties).forEach(({0: name, 1: value}) => {\n\n      if (typeof value == 'string' || typeof value == 'number') {\n\n        rendering[rendering.length] = `${UnCamelize(name)} : ${value}`\n\n      }\n\n    })\n\n    this.instance.innerHTML = `.${this.uid}{ ${rendering.join(';')} }`\n\n    this.emitter.dispatch('sync', this)\n\n    this.mount()\n\n    return this;\n\n  }\n\n}\n"]}