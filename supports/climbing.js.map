{"version":3,"file":"climbing.js","sourceRoot":"","sources":["climbing.ts"],"names":[],"mappings":";;;AAUA,MAAa,QAAQ;IAoBnB,YAEE,OAAkB,EAElB,QAAgC;QAtBlC;;WAEG;QACH,cAAS,GAAc,EAAE,CAAA;QAEzB;;WAEG;QACH,aAAQ,GAAkC,SAAS,CAAC;QAkBlD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAE,OAAO,EAAE,QAAQ,CAAE,CAAC;IAEhD,CAAC;IAGD;;;;OAIG;IACH,OAAO,CAAE,IAAuB,EAAE,QAAiB,CAAC;QAElD,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,KAAK,CAAE,KAAK,CAAE,EAAE,IAAI,CAAE,CAAA;QAEtC,OAAO,IAAI,CAAC;IAEd,CAAC;IAGD;;;;OAIG;IACH,MAAM,CAEJ,OAAkB,EAElB,QAAgC;QAIhC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QAEpB,OAAO,QAAQ,CAAC,EAAG,KAAK;YAEtB,OAAQ,KAAK,GAAG,OAAO,CAAC,MAAM,EAAG,CAAC;gBAEhC,MAAM,IAAI,OAAO,CAAK,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;;oBAEzC,IAAI,OAAO,QAAQ,IAAI,UAAU,EAAE,CAAC;wBAElC,MAAM,SAAS,GAAG,MAAM,CAAA,MAAA,QAAQ,CAAE,KAAK,CAAE,0CAAE,KAAK,CAAC,EAAE,CAAA,EAAE,CAAC,IAAI,CAAE,EAAE,CAAE,CAAE,CAAA,CAAA;wBAElE,IAAI,SAAS,EAAE,CAAC;4BAAC,IAAI,CAAE,SAAS,CAAE,CAAA;wBAAC,CAAC;6BAEhC,CAAC;4BAEH,MAAK,CAAC,mCAAmC,CAAC,CAAA;wBAE5C,CAAC;oBAEH,CAAC;gBAIH,CAAC,CAAC,CAAC;gBAEH,KAAK,EAAE,CAAC;YAEV,CAAC;QAEH,CAAC,CAAC;IAEJ,CAAC;IAGD;;;;OAIG;IACH,IAAI,CAAE,QAA2B,EAAE,IAAuB;QAExD,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAA;QAEhC,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;YAElB,IAAI,OAAO,IAAI,IAAI,UAAU,EAAE,CAAC;gBAAC,IAAI,CAAE,IAAI,CAAE,CAAC;YAAC,CAAC;YAEhD,OAAO,IAAI,CAAC;QAEd,CAAC;QAED,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA,EAAE;YAErB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC;YAEzB,IAAI,CAAC,IAAI,CAAE,QAAQ,EAAE,IAAI,CAAE,CAAC;QAE9B,CAAC,CAAC,CAAA;QAEF,OAAO,KAAK,CAAC;IAEf,CAAC;CAGF;AA7HD,4BA6HC","sourcesContent":["import type { \n  IClimbing, \n  IClimbingAsyncTask, \n  IClimbingNext, \n  IClimbingTask, \n  IClimbingYield \n} from \"../types\";\n\n\n\nexport class Climbing<R> implements IClimbing<R> {\n\n  /**\n   * Tableau de réponse\n   */\n  responses : Array<R> = []\n\n  /**\n   * Liste des étapes préparées\n   */\n  prepared : IClimbingTask<R> | undefined = undefined;\n\n\n  /**\n   * Fonction de rendement\n   */\n  yield : IClimbingYield<R>\n  \n  \n\n  constructor(\n\n    entries : Array<R>, \n    \n    callback : IClimbingAsyncTask<R>\n      \n  ){\n\n    this.yield = this.create( entries, callback );\n\n  }\n\n\n  /**\n   * Déclencher l'escalade\n   * @param done Fonction de rappel quand l'escalade est complète\n   * @param start Index à laquelle doit commencer l'escalade\n   */\n  trigger( done : IClimbingNext<R>, start : number = 0){\n\n    this.next( this.yield( start ), done )\n    \n    return this;\n    \n  }\n  \n\n  /**\n   * Création de l'escalade\n   * @param entries Tableau d'élément de type <R>\n   * @param callback Fonction de rappel pour instancier une nouvelle entrée de l'escalade\n   */\n  create( \n      \n    entries : Array<R>, \n    \n    callback : IClimbingAsyncTask<R>\n      \n  ) : IClimbingYield<R>{\n\n    this.responses = [];\n\n    return function* ( index ){\n\n      while ( index < entries.length ) {\n\n        yield new Promise<R>( async (done, fail) => {\n\n          if( typeof callback == 'function' ){\n\n            const treatment = await callback( index )?.catch(er=> fail( er ) )\n\n            if( treatment ){ done( treatment ) }\n\n            else{\n\n              throw('Climbing Promise return undefined')\n              \n            }\n\n          }\n          \n          \n          \n        });\n\n        index++;\n\n      }\n      \n    };\n\n  }\n  \n\n  /**\n   * Prochaine étape dans le tableau de l'escalade\n   * @param prepared Préparation de la liste des étapes de l'escalade\n   * @param next Fonction de rapel pour la prochaine étape dans l'escalade\n   */\n  next( prepared : IClimbingTask<R>, next : IClimbingNext<R> ){\n\n    const instance = prepared.next()\n\n    if( instance.done ){\n\n      if( typeof next == 'function' ){ next( this ); }\n      \n      return true;\n      \n    }\n\n    instance.value.then(r=>{\n\n      this.responses.push( r );\n\n      this.next( prepared, next );\n\n    })\n\n    return false;\n      \n  }\n  \n  \n}\n"]}