{"version":3,"file":"object.js","sourceRoot":"","sources":["object.ts"],"names":[],"mappings":";;;AAMA,SAAgB,YAAY,CAC1B,cAAiB,EACjB,UAAmC;IAGnC,IAAI,UAAU,EAAE,CAAC;QAEf,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,SAAS,EAAC,EAAE,EAAE,CAE7D,cAAc,CAAC,IAAe,CAAC,GAAG,SAAuB,CAC1D,CAAA;IAEH,CAAC;IAED,OAAO,cAAc,CAAC;AAExB,CAAC;AAhBD,oCAgBC;AAGD,SAAgB,uBAAuB,CAAC,KAA+B;IAErE,IAAI,MAAM,GAAG,KAAK,CAAC;IAEnB,IAAI,OAAO,KAAK,IAAI,QAAQ,IAAI,KAAK,EAAE,CAAC;QAEtC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;IAEhC,CAAC;IAED,OAAO,MAAM,CAAC;AAEhB,CAAC;AAZD,0DAYC;AAGD,SAAgB,gBAAgB,CAC9B,UAA8B,EAC9B,EAAuB,EACvB,SAA8B;IAG9B,MAAM,GAAG,GAAG,CAAC,OAAO,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,SAAS,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAEzE,IAAI,MAAM,GAAM,EAAO,CAAA;IAGvB,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAC,EAAE,EAAE;QAErD,IAAI,OAAO,KAAK,IAAI,QAAQ,IAAI,KAAK,EAAE,CAAC;YAEtC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;gBAEzB,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,EAAa,CAAA;gBAEpC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,uBAAuB,CAAC,KAAK,CAAC,EAAgB,CAAC;YAEhE,CAAC;iBAAM,CAAC;gBAEN,MAAM,mCAED,MAAM,GAEN,gBAAgB,CAAC,KAAK,EAAE,GAAG,GAAG,GAAG,IAAI,EAAE,EAAE,SAAS,CAAC,CAEvD,CAAA;YAEH,CAAC;QAEH,CAAC;aAAM,IAAI,OAAO,KAAK,IAAI,WAAW,EAAE,CAAC;YAEvC,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,EAAE,CAAA;YAEzB,MAAM,CAAC,CAAY,CAAC,GAAG,GAAG,uBAAuB,CAAC,KAAK,CAAC,EAAgB,CAAC;QAE3E,CAAC;IAEH,CAAC,CAAC,CAAA;IAEF,OAAO,MAAM,CAAC;AAEhB,CAAC;AA7CD,4CA6CC;AAGD,SAAgB,cAAc,CAAC,OAAe,EAAE,CAAmB;IAEjE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IAEZ,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;SAE3B,GAAG,CAAC,CAAC,EAAC,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAC,EAAE,EAAE,CAE3B,GAAG,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,KAAK,KAAI,EAAE,GAAG,IAAI,GAAG,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,EAAE,KAAI,GAAG,GAAG,KAAK,GAAG,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,GAAG,KAAI,EAAE,EAAE,CACjE;SAEA,IAAI,CAAC,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,MAAM,KAAI,EAAE,CAAC,CAAA;AAE1B,CAAC;AAbD,wCAaC","sourcesContent":["import type {\n  ICoreAttributesMap,\n  ICoreAttributesMapValues,\n  IObjectToString\n} from \"../types\";\n\nexport function UpdateObject<T>(\n  originalObject: T,\n  parameters?: Partial<T> | undefined\n) {\n\n  if (parameters) {\n\n    Object.entries(parameters).forEach(({0: name, 1: parameter}) =>\n\n      originalObject[name as keyof T] = parameter as T[keyof T]\n    )\n\n  }\n\n  return originalObject;\n\n}\n\n\nexport function AttributesValuesAunrser(value: ICoreAttributesMapValues) {\n\n  let parsed = value;\n\n  if (typeof value == 'object' && value) {\n\n    parsed = JSON.stringify(value)\n\n  }\n\n  return parsed;\n\n}\n\n\nexport function AttributesObject<T extends ICoreAttributesMap>(\n  attributes: ICoreAttributesMap,\n  ns?: string | undefined,\n  separator?: string | undefined\n): T {\n\n  const nms = (typeof ns != 'undefined' ? `${ns}${separator || '-'}` : '');\n\n  let output: T = {} as T\n\n\n  Object.entries(attributes).map(({0: name, 1: value}) => {\n\n    if (typeof value == 'object' && value) {\n\n      if (Array.isArray(value)) {\n\n        const k = `${nms}${name}` as keyof T\n\n        output[k] = `${AttributesValuesAunrser(value)}` as T[keyof T];\n\n      } else {\n\n        output = {\n\n          ...output,\n\n          ...AttributesObject(value, `${nms}${name}`, separator)\n\n        }\n\n      }\n\n    } else if (typeof value != 'undefined') {\n\n      const k = `${nms}${name}`\n\n      output[k as keyof T] = `${AttributesValuesAunrser(value)}` as T[keyof T];\n\n    }\n\n  })\n\n  return output;\n\n}\n\n\nexport function ObjectToString(payload: object, c?: IObjectToString) {\n\n  c = c || {};\n\n  return Object.entries(payload)\n\n    .map(({0: name, 1: value}) =>\n\n      `${c?.start || ''}${name}${c?.eq || ':'}${value}${c?.end || ''}`\n    )\n\n    .join(c?.joiner || '')\n\n}\n"]}