{"version":3,"file":"presenter.js","sourceRoot":"","sources":["presenter.ts"],"names":[],"mappings":"","sourcesContent":["import type {IEventDispatcher} from \"./event\";\nimport type {IElementTarget} from \"./value\";\nimport type {ICoreTransition} from \"./transition\";\nimport type {ILayerComposite, IPropertiesBag} from \"./composite\";\nimport type {IAppearance} from \"./appearance\";\n\nexport type IPresenterProps = {\n\n  host?: IElementTarget;\n\n  size?: IPresenterSize;\n\n}\n\n\nexport type IPresenterCardProps = IPresenterProps & {\n\n  // direction?: 'top' | 'bottom';\n\n}\n\nexport type IPresenterOverlayProps = IPresenterProps & {\n\n  direction?: 'top' | 'right' | 'bottom' | 'left' | 'center';\n\n}\n\nexport type IPresenterModalProps = IPresenterProps & {\n\n  color?: string;\n\n  locked?: boolean;\n\n  /**\n   * min : 0\n   * max : 100\n   */\n  opacity?: number;\n\n  transition?: ICoreTransition;\n\n  blurred?: boolean;\n\n}\n\nexport interface IPresenters<P extends IPresenterProps> {\n\n  get presenter(): IPresenter<P>;\n\n  status: boolean;\n\n  emitter: IEventDispatcher<IPresentersEventScheme<P>>;\n\n  initialize(): this;\n\n  render(): this;\n\n  close(): this;\n\n  open(): this;\n\n}\n\n\nexport interface IPresentersEventScheme<P extends IPresenterProps> {\n\n  open: IPresenters<P>;\n\n  close: IPresenters<P>;\n\n}\n\nexport interface IPresenterEventScheme {\n\n  open: IPresenter<IPresenterProps>;\n\n  close: IPresenter<IPresenterProps>;\n\n}\n\nexport interface ModalPresenterEventScheme extends IPresenterEventScheme {\n\n}\n\nexport interface CardPresenterEventScheme extends IPresenterEventScheme {\n\n}\n\nexport interface OverlayPresenterEventScheme extends IPresenterEventScheme {\n\n}\n\nexport type IPresenterActionProps<P extends IPresenterProps> = {\n\n  presenter: IPresenter<P>;\n\n  event?: Event;\n\n}\n\nexport type IPresenterActionCallback<P extends IPresenterProps> = (props: IPresenterActionProps<P>) => void;\n\nexport interface IPresenterAction<P extends IPresenterProps> {\n\n  name: string;\n\n  type?: keyof HTMLElementEventMap;\n\n  callback: IPresenterActionCallback<P>;\n\n}\n\nexport type IPresenterSize = 'extra-small'\n\n  | 'small'\n\n  | 'medium'\n\n  | 'large'\n\n  | 'extra-large';\n\n\nexport type IPresenterAxes = 'horizontal' | 'vertical' | 'double';\n\nexport interface IPresenter<P extends IPresenterProps> extends ILayerComposite<HTMLElement>, IPropertiesBag<P> {\n\n  emitter: IEventDispatcher<IPresenterEventScheme>\n\n  appearance: IAppearance;\n\n  anchor?: Node | undefined;\n\n  initialize(): this;\n\n  open(): this;\n\n  close(): this;\n\n  createAnchor(): this;\n\n  removeAnchor(): this;\n\n  action(action: IPresenterAction<P>): this;\n\n  actions(): IPresenterAction<P>[];\n\n  actionsDetector(host?: HTMLElement): this;\n\n  bindAction(element: HTMLElement, name: string): this;\n\n  size(size: IPresenterSize): number;\n\n  setCanvasSize(size?: IPresenterSize): this;\n\n  setCanvasCentred(axe?: IPresenterAxes): this;\n\n}\n\n\nexport interface ICardPresenter extends IPresenter<IPresenterCardProps> {\n\n  emitter: IEventDispatcher<CardPresenterEventScheme>\n\n}\n\n\nexport interface IModalPresenter extends IPresenter<IPresenterModalProps> {\n\n  emitter: IEventDispatcher<ModalPresenterEventScheme>\n\n}\n\n\nexport interface IOverlayPresenter extends IPresenter<IPresenterOverlayProps> {\n\n  emitter: IEventDispatcher<OverlayPresenterEventScheme>\n\n}\n"]}