{"version":3,"file":"composite.js","sourceRoot":"","sources":["composite.ts"],"names":[],"mappings":"","sourcesContent":["export interface IPropertiesBag<P> {\n\n  get properties(): P;\n\n  property(name: keyof P): P[keyof P] | undefined;\n\n  setProperty(name: keyof P, value: P[keyof P]): this\n\n}\n\n\nexport type ILayerComposites<Layer> = {\n\n  [k: string]: Layer;\n\n}\n\n\nexport interface ILayerComposite<Layer> {\n\n  get layer(): Layer;\n\n  layers: ILayerComposites<Layer>;\n\n  initialize(): this;\n\n  createLayer(identifier: string, tagname?: keyof HTMLElementTagNameMap): this\n\n  removeLayer(identifier: string): this\n\n  render(): Layer;\n\n  append(child?: ILayerCompositeChild<Layer>): this;\n\n  appendElement(child?: Layer): this;\n\n}\n\nexport interface ILayerCompositeChild<Layer> extends ILayerComposite<Layer> {\n\n  parent?: ILayerComposite<Layer>;\n\n  plug(parent: ILayerComposite<Layer>): this;\n\n}\n\n\n"]}