{"version":3,"file":"framerate.js","sourceRoot":"","sources":["framerate.ts"],"names":[],"mappings":"","sourcesContent":["import type {IEasing} from \"./easing\";\nimport type {IEventDispatcher} from \"./event\";\nimport {IClimbing} from \"./climbing\";\n\n\nexport type IFramerateStateCallback = () => void;\n\nexport type IFramerateCollectionStateCallback = (instance: IFramerateCollection) => void;\n\nexport type IFramerateFramePayload = {\n\n  percent: number;\n\n  value: number;\n\n};\n\nexport type IFramerateFrameCallback = (payload: IFramerateFramePayload) => void;\n\nexport type IFramerateOptions = {\n\n  from: number;\n\n  to: number;\n\n  duration: number;\n\n  frame: IFramerateFrameCallback;\n\n  ease?: IEasing\n\n}\n\nexport type IFrameratePayload = {\n\n  started?: number;\n\n  elapsed?: number;\n\n  previous?: number;\n\n}\n\n\nexport type IFramerateEmitterScheme = {\n\n  reset: IFramerate;\n\n  prepare: IFramerate;\n\n  start: IFramerate;\n\n  frame: IFramerate;\n\n  done: IFramerate;\n\n  updateElapsed: IFramerate;\n\n  checkEnding: IFramerate;\n\n}\n\n\nexport interface IFramerate {\n\n  get options(): IFramerateOptions;\n\n  get delta(): number;\n\n  get rawdelta(): number;\n\n  get sens(): boolean;\n\n  get payload(): IFrameratePayload;\n\n  emitter: IEventDispatcher<IFramerateEmitterScheme>;\n\n  start(): this;\n\n  asyncStart(): Promise<IFramerate>;\n\n  reset(): this;\n\n  syncronizeValue(value: number): number;\n\n}\n\nexport type IFramerateProps = {\n\n  parallel?: boolean;\n\n  infinite?: boolean;\n\n  entries: IFramerate[]\n\n}\n\nexport interface IFramerateCollection {\n\n  climbing: IClimbing<IFramerate> | undefined;\n\n  get history(): IFramerate[];\n\n  start(callback?: IFramerateCollectionStateCallback): this;\n\n  startConsecutive(callback?: IFramerateCollectionStateCallback): this;\n\n  startParallel(callback?: IFramerateCollectionStateCallback): this;\n\n  reset(): this;\n\n}\n"]}