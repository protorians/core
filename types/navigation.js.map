{"version":3,"file":"navigation.js","sourceRoot":"","sources":["navigation.ts"],"names":[],"mappings":"","sourcesContent":["import type {IProps} from \"./value\";\nimport type {IEventDispatcher} from \"./event\";\n\n\nexport type INavigationNavigateParser = 'hashtag' | 'directory'\n\nexport type INavigationNavigateProps<Scheme> = {\n\n  navigation: INavigation<Scheme>;\n\n  routeName: keyof Scheme;\n\n  parser: INavigationNavigateParser;\n\n}\n\nexport type INavigationMiddlewareProps<Scheme> = {\n\n  navigation: INavigation<Scheme>;\n\n  event: Event | undefined;\n\n  parser: INavigationNavigateParser;\n\n  routeName: keyof Scheme;\n\n  props: Scheme[keyof Scheme] | IProps | undefined;\n\n}\n\nexport type INavigationMiddlewareCallback<Scheme> = (\n  payload: INavigationMiddlewareProps<Scheme>\n) => void;\n\n\nexport type INavigationOptions<Scheme> = {\n\n  useHashtagParser?: boolean;\n\n  capture?: boolean;\n\n  middlewares?: INavigationMiddlewareCallback<Scheme>[]\n\n}\n\n\nexport interface INavigationEmitterScheme<Scheme> {\n\n  options: INavigation<Scheme>;\n\n  navigate: INavigationNavigateProps<Scheme>;\n\n}\n\n\nexport interface INavigation<Scheme> {\n\n  emitter: IEventDispatcher<INavigationEmitterScheme<Scheme>>\n\n  options: INavigationOptions<Scheme>;\n\n  setOptions(options: INavigationOptions<Scheme>): this;\n\n  setOption(optionName: keyof INavigationOptions<Scheme>, value: (INavigationMiddlewareCallback<Scheme>[] & boolean) | undefined): this;\n\n  middleware(middleware: INavigationMiddlewareCallback<Scheme>): this;\n\n  dispatchNavigate(ev?: PopStateEvent | undefined): this;\n\n  capturesActions(): this;\n\n  isExternalURL(url: string): boolean;\n\n  parseElementCaptured(event: Event): HTMLElement | undefined;\n\n  currentRouteName(): keyof Scheme;\n\n  oldRouteName(): keyof Scheme | undefined;\n\n  currentQuery<T>(): T | undefined;\n\n  observe(): this;\n\n  navigate(\n    route: keyof Scheme,\n    props?: Scheme[keyof Scheme],\n    ev?: PopStateEvent\n  ): this;\n\n}\n"]}