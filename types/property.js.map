{"version":3,"file":"property.js","sourceRoot":"","sources":["property.ts"],"names":[],"mappings":"","sourcesContent":["\nexport type PropertyScheme = {\n  [P: string]: string | null | undefined;\n}\n\nexport type PropertyEachCallback<T extends PropertyScheme> = (value: T[keyof T], key: keyof T, map: Map<keyof T, T[keyof T]>) => void\n\nexport interface IProperty<T extends PropertyScheme> {\n  get map(): Map<keyof T, T[keyof T]>;\n  get scheme():  IterableIterator<[keyof T, T[keyof T]]>;\n  get values(): IterableIterator<T[keyof T]>;\n  get keys(): IterableIterator<keyof T>;\n  each(callback: PropertyEachCallback<T>): IProperty<T>\n  set<P extends keyof T>(name: P, value: T[P]): IProperty<T>;\n  get<P extends keyof T>(name: P): T[P];\n  exist<P extends keyof T>(key: P): boolean;\n  fill(scheme: T): IProperty<T>;\n  reset(): IProperty<T>;\n  clear(): IProperty<T>;\n  delete<P extends keyof T>(key: P): IProperty<T>;\n}"]}